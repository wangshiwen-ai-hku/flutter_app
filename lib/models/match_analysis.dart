import 'package:flutter_app/models/user_data.dart';

/// Represents a single scored feature from the AI analysis.
class ScoredFeature {
  final int score;
  final String explanation;

  ScoredFeature({required this.score, required this.explanation});

  factory ScoredFeature.fromJson(Map<String, dynamic> json) {
    return ScoredFeature(
      score: (json['score'] as num).toInt(),
      explanation: json['explanation'] as String,
    );
  }
}

/// Represents a detailed analysis of a match between two users,
/// generated by the backend AI service.
class MatchAnalysis {
  final String id; // Unique ID for this specific match analysis
  final UserData userA; // The current user
  final UserData userB; // The matched user

  /// A witty, one-sentence summary of the match.
  final String matchSummary;

  /// A holistic AI-generated compatibility score (0.0 to 1.0).
  final double totalScore;

  /// A breakdown of compatibility across different traits, with scores.
  /// e.g., {'Creative Spark': ScoredFeature(score: 90, explanation: '...')}
  final Map<String, ScoredFeature> similarFeatures;

  MatchAnalysis({
    required this.id,
    required this.userA,
    required this.userB,
    required this.totalScore,
    required this.matchSummary,
    this.similarFeatures = const {},
  });

  factory MatchAnalysis.fromJson(Map<String, dynamic> json) {
    // Convert total score from 0-100 range to 0.0-1.0 range if necessary
    double score = (json['totalScore'] as num).toDouble();
    if (score > 1.0) {
      score = score / 100.0;
    }

    // Parse the similar features map
    final featuresData = json['similarFeatures'] as Map<String, dynamic>? ?? {};
    final similarFeatures = featuresData.map(
      (key, value) => MapEntry(key, ScoredFeature.fromJson(value as Map<String, dynamic>)),
    );

    return MatchAnalysis(
      id: json['id'] ?? 'unknown_match',
      userA: UserData.fromJson(json['userA']),
      userB: UserData.fromJson(json['userB']),
      totalScore: score.clamp(0.0, 1.0), // Ensure score is within valid range
      matchSummary: json['summary'] ?? 'No summary available',
      similarFeatures: similarFeatures,
    );
  }
}
