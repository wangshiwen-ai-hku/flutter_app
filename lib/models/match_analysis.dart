import 'dart:typed_data';
import 'package:flutter_app/models/user_data.dart';

/// Represents a detailed analysis of a match between two users,
/// typically generated by a backend or an AI service.
class MatchAnalysis {
  final String id; // Unique ID for this specific match analysis
  final UserData userA; // The current user
  final UserData userB; // The matched user

  /// An AI-generated compatibility score, e.g., from 0.0 to 1.0.
  final double aiScore;

  /// A short, poetic summary of why these two users might connect.
  final String matchSummary;

  /// A breakdown of compatibility across different traits.
  /// e.g., {'storyteller': 0.8, 'observer': 0.6, 'dream log': 0.9}
  final Map<String, double> traitCompatibility;

  /// An AI-generated image representing the compatibility, like a chart or a creative blend.
  final Uint8List? compatibilityChart;

  /// The final compatibility score (0.0 to 1.0), potentially combining AI and formula scores
  final double finalScore;

  /// AI-generated conversation starter questions
  final List<String> conversationStarters;

  /// Compatibility score calculated using a formula (traits-based)
  final double formulaScore;

  MatchAnalysis({
    required this.id,
    required this.userA,
    required this.userB,
    required this.aiScore,
    required this.matchSummary,
    this.traitCompatibility = const {},
    this.compatibilityChart,
    required this.finalScore,
    required this.conversationStarters,
    required this.formulaScore,
  });

  factory MatchAnalysis.fromJson(Map<String, dynamic> json) {
    // Convert AI score from 0-100 range to 0.0-1.0 range
    double aiScore = (json['aiScore'] as num).toDouble();
    if (aiScore > 1.0) {
      aiScore = aiScore / 100.0; // Convert from 0-100 to 0.0-1.0
    }

    // Handle conversation starters - default to empty list if not provided
    final conversationStarters = json['conversationStarters'] != null
        ? List<String>.from(json['conversationStarters'])
        : <String>[];

    // Handle final score - use aiScore if not provided
    final finalScore = (json['finalScore'] as num?)?.toDouble() ?? aiScore;

    // Handle formula score - use aiScore if not provided
    final formulaScore = (json['formulaScore'] as num?)?.toDouble() ?? aiScore;

    return MatchAnalysis(
      id: json['id'] ?? 'unknown_match',
      userA: UserData.fromJson(json['userA']),
      userB: UserData.fromJson(json['userB']),
      aiScore: aiScore.clamp(0.0, 1.0), // Ensure score is within valid range
      matchSummary: json['summary'] ?? 'No summary available',
      traitCompatibility: Map<String, double>.from(json['traitCompatibility'] ?? {}),
      finalScore: finalScore.clamp(0.0, 1.0),
      conversationStarters: conversationStarters,
      formulaScore: formulaScore.clamp(0.0, 1.0),
    );
  }
}
